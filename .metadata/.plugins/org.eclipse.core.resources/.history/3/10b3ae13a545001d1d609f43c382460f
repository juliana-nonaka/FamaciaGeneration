package com.generation.farmaciageneration.controller;

import java.util.List;
import java.util.Optional;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.server.ResponseStatusException;

import com.generation.farmaciageneration.model.Produto;
import com.generation.farmaciageneration.repository.CategoriaRepository;



@RestController
@RequestMapping("/categoria")
@CrossOrigin(origins = "*", allowedHeaders = "*")
public class CategoriaController {

	@Autowired
	private CategoriaRepository categoriaRepository;
	


@GetMapping
public ResponseEntity<List<Produto>> getAll() {
	return ResponseEntity.ok(categoriaRepository.findAll());
}
@GetMapping("/{id}")
public ResponseEntity<Produto> getById(@PathVariable Long id) {
	return categoriaRepository.findById(id)
			.map(resposta -> ResponseEntity.ok(resposta))
			.orElse(ResponseEntity.status(HttpStatus.NOT_FOUND).build());
	
}
@GetMapping("/titulo/{titulo}")
public ResponseEntity<List<Produto>> getByTitulo(@PathVariable String titulo) {
	return ResponseEntity.ok(categoriaRepository.findAllByTituloContainingIgnoreCase(titulo));
}
@PostMapping
public ResponseEntity<Produto> post(@Valid @RequestBody Produto postagem) {
	return ResponseEntity.status(HttpStatus.CREATED)
			.body(categoriaRepository.save(postagem));
}
@PutMapping
public ResponseEntity<Produto> put(@Valid @RequestBody Produto postagem) {
	return categoriaRepository.findById(postagem.getId())
			.map(resposta -> ResponseEntity.status(HttpStatus.OK)
			.body(categoriaRepository.save(postagem)))
			.orElse(ResponseEntity.status(HttpStatus.NOT_FOUND).build());
}
@ResponseStatus(HttpStatus.NO_CONTENT)
@DeleteMapping("/{id}")
public void delete(@PathVariable Long id) {
	Optional<Produto> postagem = categoriaRepository.findById(id);
	
	if(postagem.isEmpty())
		throw new ResponseStatusException(HttpStatus.NOT_FOUND);
	
	categoriaRepository.deleteById(id);
}

}
